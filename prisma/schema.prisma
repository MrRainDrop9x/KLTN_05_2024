datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   purchases[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exams           Exam[]
  Feedback        Feedback[]
  Question        Question[]
  CourseStatistic CourseStatistic?

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes     Note[]
  questions Question[]

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?

  chapterId String  @unique @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model purchases {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  users  users  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  // users     users?   @relation(fields: [usersId], references: [id])
  // usersId   String?  @db.ObjectId

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  chapterId String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model Personalization {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  dashboard String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  label      String
  value      String
  questionId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  correctAnswer String
  courseId      String   @db.ObjectId
  chapterId     String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  answer        Answer[]
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapter       Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([chapterId])
}

model Exam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  answers   String
  exactRate Float
  isPerfect Boolean  @default(false)
  courseId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model Feedback {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  courseId  String @db.ObjectId
  content   String
  fullName  String
  avatarUrl String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model CourseStatistic {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String   @db.ObjectId
  categoryId String
  views      Int      @default(0)
  purchases  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  //@@index([courseId])

  @@unique([courseId])
}

model users {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @unique
  avatarUrl  String?
  purchases  purchases[]
  name       String
  email      String      @unique
  avatar     String?
  role       String      @default("user")
  isVerified Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
